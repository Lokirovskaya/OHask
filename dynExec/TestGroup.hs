{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# OPTIONS_GHC -Wno-unrecognised-pragmas #-}

{-# HLINT ignore "Redundant return" #-}
{-# HLINT ignore "Use <$>" #-}

module TestGroup (testGroup, testGroup2, testGroup3) where

import Control.Applicative ((<|>))
import Data.Dynamic (Dynamic, fromDynamic)
import RandomGen

class Test a where
  testGroup :: (a -> [Dynamic]) -> IO ()

class Test2 a b where
  testGroup2 :: (a -> b -> [Dynamic]) -> IO ()

class Test3 a b c where
  testGroup3 :: (a -> b -> c -> [Dynamic]) -> IO ()

scaleDynInt :: Dynamic -> Maybe Int
scaleDynInt d = do
  -- Outer `Maybe` is generated by `fromDynamic`
  -- Inner `Maybe` is from the expr test result
  result <- fromDynamic d :: Maybe (Maybe Int)
  val <- result
  return val

scaleDynList :: Dynamic -> Maybe Int
scaleDynList d = do
  result <- fromDynamic d :: Maybe (Maybe [Int])
  val <- result
  return $ length val

scaleDyn :: Dynamic -> Maybe Int
scaleDyn d =
  scaleDynInt d <|> scaleDynList d

showResults :: [Dynamic] -> IO ()
showResults ds = do
  let results = map scaleDyn ds
  print results

instance Test Int where
  testGroup g = do
    x <- randInt
    showResults $ g x

instance Test [Int] where
  testGroup g = do
    x <- randIntList
    showResults $ g x

instance Test2 Int Int where
  testGroup2 g = do
    x1 <- randInt
    x2 <- randInt
    showResults $ g x1 x2

instance Test2 [Int] Int where
  testGroup2 g = do
    x1 <- randIntList
    x2 <- randInt
    showResults $ g x1 x2

instance Test2 Int [Int] where
  testGroup2 g = do
    x1 <- randInt
    x2 <- randIntList
    showResults $ g x1 x2

instance Test2 [Int] [Int] where
  testGroup2 g = do
    x1 <- randIntList
    x2 <- randIntList
    showResults $ g x1 x2

test3T :: IO t1 -> IO t2 -> IO t3 -> (t1 -> t2 -> t3 -> [Dynamic]) -> IO ()
test3T a b c g = do
  x1 <- a
  x2 <- b
  x3 <- c
  showResults $ g x1 x2 x3

instance Test3 Int Int Int where testGroup3 = test3T randInt randInt randInt

instance Test3 [Int] Int Int where testGroup3 = test3T randIntList randInt randInt

instance Test3 Int [Int] Int where testGroup3 = test3T randInt randIntList randInt

instance Test3 Int Int [Int] where testGroup3 = test3T randInt randInt randIntList

instance Test3 [Int] [Int] Int where testGroup3 = test3T randIntList randIntList randInt

instance Test3 [Int] Int [Int] where testGroup3 = test3T randIntList randInt randIntList

instance Test3 Int [Int] [Int] where testGroup3 = test3T randInt randIntList randIntList

instance Test3 [Int] [Int] [Int] where testGroup3 = test3T randIntList randIntList randIntList